name: "Technical Changelogggrgegeth"

on:
  pull_request:
    types:
      - closed

permissions: read-all

jobs:
  version-bump:
    if: ${{ github.event.pull_request.merged && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    outputs: 
      current_version: ${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}
      next_version: ${{ steps.next_version.outputs.NEXT_PROJECT_VERSION }}
      
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Current Tag
        id: current_version
        run: |
          CURRENT_PROJECT_VERSION=$(git describe --tags --abbrev=0 | tr -d 'v')
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}" >> "$GITHUB_OUTPUT"
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}"
          
      - name: Check version impact and increment accordingly
        id: next_version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! echo "${COMMIT_MSG}" | grep -qE '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' &> /dev/null ; then
            echo "Squashed commit message does not meet the standard regex"
            exit 1
          fi
          COMMIT_IMPACT_TYPE=$(echo "${COMMIT_MSG}" | grep -oE "(major|minor|patch)" | head -1)
          case $COMMIT_IMPACT_TYPE in
            major)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$1++;$2=0;$3=0;print}' OFS=.)
              ;;
            minor)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$2++;$3=0;print}' OFS=.)
              ;;
            patch)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$3++;print}' OFS=.)
              ;;
            *)
              echo "Invalid impact type"
              exit 1
              ;;
          esac
          echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}"

  create-changelog-entry:
    runs-on: ubuntu-latest
    needs: version-bump
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Release Notes for CHANGELOG.md
        run: |
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_ENV"    
          echo "- $(git show -s --format=%s) by ${{ github.event.sender.login }} [${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})" >> "$GITHUB_ENV"  
          echo EOF >> "$GITHUB_ENV"  

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ needs.version-bump.outputs.next_version }}
          release-notes: |
            ${{ env.RELEASE_NOTES }}
            
      - name: Push new changelog
        run: |
          git add --update
          git switch ${{ github.event.repository.default_branch }}
          git config --global user.name "gitBot"
          git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
          git commit -m "Changelog of ${{ github.ref_name }}"
          git log --graph --all --oneline
          git push origin  

      - name: Create Tag
        run: |
          git config --global user.name "gitBot"
          git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
          git tag -a "${{ needs.version-bump.outputs.next_version }}" -m "Release v${{ needs.version-bump.outputs.next_version }}"
          echo "Bumping Version from ${{ needs.version-bump.outputs.current_version }} to ${{ needs.version-bump.outputs.next_version }}"
          git push --follow-tags origin ${{ github.base_ref }} "${{ needs.version-bump.outputs.next_version }}"    
          

      
           


     
