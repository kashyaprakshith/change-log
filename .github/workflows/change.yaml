name: "Technical Changelogggrgegeth"



on:
  pull_request:
    types:
      - closed

permissions: read-all

jobs:
  version-bump:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    outputs: 
      current_version: ${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}
      next_version: ${{ steps.next_version.outputs.NEXT_PROJECT_VERSION }}
      
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Current Tag
        id: current_version
        run: |
          CURRENT_PROJECT_VERSION=$(git describe --tags --abbrev=0 )
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}" >> "$GITHUB_OUTPUT"
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}"
          
      - name: Check version impact and increment accordingly
        id: next_version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! echo "${COMMIT_MSG}" | grep -qE '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' &> /dev/null ; then
            echo "Squashed commit message does not meet the standard regex"
            exit 1
          fi
          COMMIT_IMPACT_TYPE=$(echo "${COMMIT_MSG}" | grep -oE "(major|minor|patch)" | head -1)
          case $COMMIT_IMPACT_TYPE in
            major)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$1++;$2=0;$3=0;print}' OFS=.)
              ;;
            minor)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$2++;$3=0;print}' OFS=.)
              ;;
            patch)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$3++;print}' OFS=.)
              ;;
            *)
              echo "Invalid impact type"
              exit 1
              ;;
          esac
          echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}"

#  [squashed-message] by {author_name} [#{number}]({html_href}) 
  create-changelog-entry:
    runs-on: ubuntu-latest
    needs: version-bump
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
         # ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Get Current Tag
        run: | 
          echo "Sender:         ${{ github.event.sender.login }}"
          echo "PR:             ${{ github.event.pull_request.number }}"
          echo "PR-link:        ${{ github.event.pull_request.html_url }}"
          echo "Commit-message: $(git log -1 --pretty=%B)" 
          echo "- $(git log -1 --pretty=%s) by ${{ github.event.sender.login }} [${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})" 

      - name: multiline string
        run: |
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_ENV"    
          echo "- $(git show -s --format=%s) by ${{ github.event.sender.login }} [${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})" >> "$GITHUB_ENV"  
          echo EOF >> "$GITHUB_ENV"

      - name: see env variable
        run: echo "release notes=${{ env.RELEASE_NOTES }}"    

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ needs.version-bump.outputs.next_version }}
          release-notes: |
            ${{ env.RELEASE_NOTES }}
            
         
      - name: Push new changelog
        run: |
          git add --update
          git switch ${{ github.event.repository.default_branch }}
          git config --global user.name "gitBot"
          git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
          git commit -m "Changelog of ${{ github.ref_name }}"
          git log --graph --all --oneline
          git push origin  

      - name: Create Tag
        run: |
          git config --global user.name "gitBot"
          git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
          git tag -a "${{ needs.version-bump.outputs.next_version }}" -m "Release v${{ needs.version-bump.outputs.next_version }}"
          echo "Bumping Version from ${{ needs.version-bump.outputs.current_version }} to ${{ needs.version-bump.outputs.next_version }}"
          git push --follow-tags origin ${{ github.base_ref }} "${{ needs.version-bump.outputs.next_version }}"    
          

      
           

      
#       - name: Check version impact and increment accordingly
#         run: |
#           COMMIT_MSG=$(git log -1 --pretty=%B)
#           if ! echo "${COMMIT_MSG}" | grep -qE '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' &> /dev/null ; then
#             echo "Squashed commit message does not meet the standard regex"
#             exit 1
#           fi
#           COMMIT_IMPACT_TYPE=$(echo "${COMMIT_MSG}" | grep -oE "(major|minor|patch)" | head -1)
#           case $COMMIT_IMPACT_TYPE in
#             major)
#               NEXT_PROJECT_VERSION=$(echo "${CURRENT_PROJECT_VERSION}" | awk -F. '/[0-9]+\./{$1++;$2=0;$3=0;print}' OFS=.)
#               ;;
#             minor)
#               NEXT_PROJECT_VERSION=$(echo "${CURRENT_PROJECT_VERSION}" | awk -F. '/[0-9]+\./{$2++;$3=0;print}' OFS=.)
#               ;;
#             patch)
#               NEXT_PROJECT_VERSION=$(echo "${CURRENT_PROJECT_VERSION}" | awk -F. '/[0-9]+\./{$3++;print}' OFS=.)
#               ;;
#             *)
#               echo "Invalid impact type"
#               exit 1
#               ;;
#           esac
#           echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}" >> "$GITHUB_ENV"
#       - name: Create Tag
#         run: |
#           git config --global user.name "gitBot"
#           git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
#           git tag -a "${NEXT_PROJECT_VERSION}" -m "Release v${NEXT_PROJECT_VERSION}"
#           echo "Bumping Version from ${CURRENT_PROJECT_VERSION} to ${NEXT_PROJECT_VERSION}"
#           git push --follow-tags origin ${{ github.base_ref }} "${NEXT_PROJECT_VERSION}"


#   change-log:
#     runs-on: ubuntu-latest
#     needs: version-bump
#     permissions:
#       contents: write
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
          
#       # Setup Python    
#       - uses: actions/setup-python@v4
#         with:
#           python-version: '3.12'

#       - name: Install git python
#         run: |
#           pip3 install -q GitPython==3.1.40    

#       - name: Get latest tag
#         id: latest-tag
#         run: |
#           LATEST_TAG=$(git describe --tags --abbrev=0) 
#           echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
          
#       - name: Get previous tag
#         id: previous-tag
#         run: |
#           PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 -n 1)) 
#           echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> "$GITHUB_ENV"
 
#       - name: Generate markdown for changelog
#         shell: python
#         env:
#           TOKEN: ${{ secrets.TEST }}
#         run: |
#           import git
#           import re
#           import http.client
#           import json
#           import os
          
#           conn = http.client.HTTPSConnection("api.github.com")
#           token = os.environ['TOKEN']
#           payload = ""
#           token = "Bearer " + token
          
#           headers = {
#               'content-type': "application/json; charset=utf-8",
#               'Authorization': token,
#               'User-Agent': 'Your-User-Agent-Name'
#           }
          
#           repo = git.Repo(search_parent_directories=True)
          
#           # Get the latest tag
#           latest_tag = repo.tags[-1]
          
#           # Get the previous tag prior to latest tag
#           previous_tag = os.environ['PREVIOUS_TAG']
          
#           # Define Regex pattern for filtering commit messages
#           patterns = [r'(?:^\[)(\b[A-Z][A-Z0-9_]+-[1-9][0-9]*)(?:\])']
          
#           # Compile regex patterns
#           regex_patterns = [re.compile(pattern) for pattern in patterns]
          
#           # Iterate commits between previous tag and latest tag
#           commits_since_latest_tag = list(repo.iter_commits(f"{previous_tag}..{latest_tag}", no_merges=True))
          
#           markdown = []
#           for commit in commits_since_latest_tag:
#               message = commit.message.strip()
#               for pattern in regex_patterns:
#                   if pattern.match(commit.message.strip()):
#                       sha = str(commit.hexsha)
#                       conn.request("GET", f"/repos/kashyaprakshith/change-log/commits/{sha}/pulls", payload, headers)
#                       response = conn.getresponse()
#                       data = response.read().decode("utf-8")
#                       info = json.loads(data)
#                       data = response.read().decode("utf-8")  
#                       # extract the PR link from the response
#                       html_href = info[0].get('_links', {}).get('html', {}).get('href', '') 
          
#                       # extract the author name
#                       author_name = commit.author.name 
          
#                       # extract the PR link
#                       link = f"{html_href}"
#                       # Regex pattern match to extract PR Number
#                       pattern = r'/pull/(\d+)'
#                       match = re.search(pattern, link)
#                       if match:
#                           number = match.group(1)
          
                      
#                       data = f"- {message} by {author_name} [#{number}]({html_href})"
#                       markdown.append(data)
#           markdown_str = "\n".join(markdown)
#           print(markdown_str)
          
#           # modify the markdown_str as a multiline string
#           modified = f'''RELEASE_NOTES<<EOF
#           {markdown_str}
#           EOF
#           '''
#           # Upload to GITHUB_ENV
#           env_file = os.getenv('GITHUB_ENV')
#           with open(env_file, "a") as myfile:
#               myfile.write(modified)
          
#       - name: Update Changelog
#         uses: stefanzweifel/changelog-updater-action@v1
#         with:
#           latest-version: ${{ env.LATEST_TAG }}
#           release-notes: |
#             ${{ env.RELEASE_NOTES }}
  

#       - name: Push new changelog
#         run: |
#           git add --update
#           git switch ${{ github.event.repository.default_branch }}
#           git config --global user.name "gitBot"
#           git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
#           git commit -m "Changelog of ${{ github.ref_name }}"
#           git log --graph --all --oneline
#           git push origin 

     


      
           

      
#       - name: Check version impact and increment accordingly
#         run: |
#           COMMIT_MSG=$(git log -1 --pretty=%B)
#           if ! echo "${COMMIT_MSG}" | grep -qE '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' &> /dev/null ; then
#             echo "Squashed commit message does not meet the standard regex"
#             exit 1
#           fi
#           COMMIT_IMPACT_TYPE=$(echo "${COMMIT_MSG}" | grep -oE "(major|minor|patch)" | head -1)
#           case $COMMIT_IMPACT_TYPE in
#             major)
#               NEXT_PROJECT_VERSION=$(echo "${CURRENT_PROJECT_VERSION}" | awk -F. '/[0-9]+\./{$1++;$2=0;$3=0;print}' OFS=.)
#               ;;
#             minor)
#               NEXT_PROJECT_VERSION=$(echo "${CURRENT_PROJECT_VERSION}" | awk -F. '/[0-9]+\./{$2++;$3=0;print}' OFS=.)
#               ;;
#             patch)
#               NEXT_PROJECT_VERSION=$(echo "${CURRENT_PROJECT_VERSION}" | awk -F. '/[0-9]+\./{$3++;print}' OFS=.)
#               ;;
#             *)
#               echo "Invalid impact type"
#               exit 1
#               ;;
#           esac
#           echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}" >> "$GITHUB_ENV"
#       - name: Create Tag
#         run: |
#           git config --global user.name "gitBot"
#           git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
#           git tag -a "${NEXT_PROJECT_VERSION}" -m "Release v${NEXT_PROJECT_VERSION}"
#           echo "Bumping Version from ${CURRENT_PROJECT_VERSION} to ${NEXT_PROJECT_VERSION}"
#           git push --follow-tags origin ${{ github.base_ref }} "${NEXT_PROJECT_VERSION}"


#   change-log:
#     runs-on: ubuntu-latest
#     needs: version-bump
#     permissions:
#       contents: write
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
          
#       # Setup Python    
#       - uses: actions/setup-python@v4
#         with:
#           python-version: '3.12'

#       - name: Install git python
#         run: |
#           pip3 install -q GitPython==3.1.40    

#       - name: Get latest tag
#         id: latest-tag
#         run: |
#           LATEST_TAG=$(git describe --tags --abbrev=0) 
#           echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
          
#       - name: Get previous tag
#         id: previous-tag
#         run: |
#           PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 -n 1)) 
#           echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> "$GITHUB_ENV"
 
#       - name: Generate markdown for changelog
#         shell: python
#         env:
#           TOKEN: ${{ secrets.TEST }}
#         run: |
#           import git
#           import re
#           import http.client
#           import json
#           import os
          
#           conn = http.client.HTTPSConnection("api.github.com")
#           token = os.environ['TOKEN']
#           payload = ""
#           token = "Bearer " + token
          
#           headers = {
#               'content-type': "application/json; charset=utf-8",
#               'Authorization': token,
#               'User-Agent': 'Your-User-Agent-Name'
#           }
          
#           repo = git.Repo(search_parent_directories=True)
          
#           # Get the latest tag
#           latest_tag = repo.tags[-1]
          
#           # Get the previous tag prior to latest tag
#           previous_tag = os.environ['PREVIOUS_TAG']
          
#           # Define Regex pattern for filtering commit messages
#           patterns = [r'(?:^\[)(\b[A-Z][A-Z0-9_]+-[1-9][0-9]*)(?:\])']
          
#           # Compile regex patterns
#           regex_patterns = [re.compile(pattern) for pattern in patterns]
          
#           # Iterate commits between previous tag and latest tag
#           commits_since_latest_tag = list(repo.iter_commits(f"{previous_tag}..{latest_tag}", no_merges=True))
          
#           markdown = []
#           for commit in commits_since_latest_tag:
#               message = commit.message.strip()
#               for pattern in regex_patterns:
#                   if pattern.match(commit.message.strip()):
#                       sha = str(commit.hexsha)
#                       conn.request("GET", f"/repos/kashyaprakshith/change-log/commits/{sha}/pulls", payload, headers)
#                       response = conn.getresponse()
#                       data = response.read().decode("utf-8")
#                       info = json.loads(data)
#                       data = response.read().decode("utf-8")  
#                       # extract the PR link from the response
#                       html_href = info[0].get('_links', {}).get('html', {}).get('href', '') 
          
#                       # extract the author name
#                       author_name = commit.author.name 
          
#                       # extract the PR link
#                       link = f"{html_href}"
#                       # Regex pattern match to extract PR Number
#                       pattern = r'/pull/(\d+)'
#                       match = re.search(pattern, link)
#                       if match:
#                           number = match.group(1)
          
                      
#                       data = f"- {message} by {author_name} [#{number}]({html_href})"
#                       markdown.append(data)
#           markdown_str = "\n".join(markdown)
#           print(markdown_str)
          
#           # modify the markdown_str as a multiline string
#           modified = f'''RELEASE_NOTES<<EOF
#           {markdown_str}
#           EOF
#           '''
#           # Upload to GITHUB_ENV
#           env_file = os.getenv('GITHUB_ENV')
#           with open(env_file, "a") as myfile:
#               myfile.write(modified)
          
#       - name: Update Changelog
#         uses: stefanzweifel/changelog-updater-action@v1
#         with:
#           latest-version: ${{ env.LATEST_TAG }}
#           release-notes: |
#             ${{ env.RELEASE_NOTES }}
  

#       - name: Push new changelog
#         run: |
#           git add --update
#           git switch ${{ github.event.repository.default_branch }}
#           git config --global user.name "gitBot"
#           git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
#           git commit -m "Changelog of ${{ github.ref_name }}"
#           git log --graph --all --oneline
#           git push origin 

     
