name: "Bump release version"

on:
  #pull_request:
    #types:
     # - closed
   push:
 

permissions: read-all

jobs:
  version-bump:
   # if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    outputs: 
      current_version: ${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}
      next_version: ${{ steps.next_version.outputs.NEXT_PROJECT_VERSION }}
      
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Current Tag
        id: current_version
        run: |
          CURRENT_PROJECT_VERSION=$(git describe --tags --abbrev=0 )
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}" >> "$GITHUB_OUTPUT"
          echo "CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION}"
          
      - name: Check version impact and increment accordingly
        id: next_version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! echo "${COMMIT_MSG}" | grep -qE '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' &> /dev/null ; then
            echo "Squashed commit message does not meet the standard regex"
            exit 1
          fi
          COMMIT_IMPACT_TYPE=$(echo "${COMMIT_MSG}" | grep -oE "(major|minor|patch)" | head -1)
          case $COMMIT_IMPACT_TYPE in
            major)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$1++;$2=0;$3=0;print}' OFS=.)
              ;;
            minor)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$2++;$3=0;print}' OFS=.)
              ;;
            patch)
              NEXT_PROJECT_VERSION=$(echo "${{ steps.current_version.outputs.CURRENT_PROJECT_VERSION }}" | awk -F. '/[0-9]+\./{$3++;print}' OFS=.)
              ;;
            *)
              echo "Invalid impact type"
              exit 1
              ;;
          esac
          echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "NEXT_PROJECT_VERSION=${NEXT_PROJECT_VERSION}"

  change-log:
    runs-on: ubuntu-latest
    needs: version-bump
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install git python
        run: |
          pip3 install -q GitPython==3.1.40
      - name: see next version
        run: |
          echo " next verdion is ${{ needs.version-bump.outputs.next_version }} "
          echo " current verdion is ${{ needs.version-bump.outputs.current_version }} "
        
      - name: Generate markdown for changelog
        shell: python
        env:
          TOKEN: ${{ secrets.TEST }}
        run: |
          import git
          import re
          import http.client
          import json
          import os
          
          conn = http.client.HTTPSConnection("api.github.com")
          token = os.environ['TOKEN']
          payload = ""
          token = "Bearer " + token
          headers = {
              'content-type': "application/json; charset=utf-8",
              'Authorization': token,
              'User-Agent': 'Your-User-Agent-Name'
          }
          repo = git.Repo(search_parent_directories=True)
          remote_url = repo.remotes.origin.url
          owner, repo_name = remote_url.split("/")[-2:]
          # repo_name = repo_name[:-4]
          tags = list(repo.tags)
          tags.sort(key=lambda tag: tag.commit.committed_date, reverse=True)
          latest_pushed_tag = tags[0]
          patterns = [r'(?:^\[)(\b[A-Z][A-Z0_9]+-[1-9][0-9]*)(?:\])']
          regex_patterns = [re.compile(pattern) for pattern in patterns]
          commits_since_latest_tag = list(repo.iter_commits(rev=f"{latest_pushed_tag}..HEAD"))
          markdown = []
          for commit in commits_since_latest_tag:
              message = commit.message.strip()
              for pattern in regex_patterns:
                  if pattern.match(commit.message.strip()):
                      sha = str(commit.hexsha)
                      print(f"/repos/{owner}/{repo_name}/commits/{sha}/pulls")
                      conn.request("GET", f"/repos/{owner}/{repo_name}/commits/{sha}/pulls", payload, headers)
                      response = conn.getresponse()
                      data = response.read().decode("utf-8")
                      print(data)
                      info = json.loads(data)
                      print(info)  
                      html_href = info[0].get('_links', {}).get('html', {}).get('href', '') 
                      author_name = commit.author.name 
                      link = f"{html_href}"
                      pattern = r'/pull/(\d+)'
                      match = re.search(pattern, link)
                      if match:
                          number = match.group(1)
                      data = f"- {message} by {author_name} [#{number}]({html_href})"
                      markdown.append(data)
          markdown_str = "\n".join(markdown)
          print(markdown_str)
          print(f"Owner: {owner}")
          print(f"Repository Name: {repo_name}")
          modified = f'''RELEASE_NOTES<<EOF
          {markdown_str}
          EOF
          '''
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
              myfile.write(modified)

              
      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ needs.version-bump.outputs.next_version }}
          release-notes: |
            ${{ env.RELEASE_NOTES }}
            
      - name: Create Tag
        run: |
          git config --global user.name "gitBot"
          git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
          git tag -a "$${{ needs.version-bump.outputs.next_version }}" -m "Release v${{ needs.version-bump.outputs.next_version }}"
          echo "Bumping Version from ${{ needs.version-bump.outputs.current_version }} to ${{ needs.version-bump.outputs.next_version }}"
          git push --follow-tags origin ${{ github.base_ref }} "${{ needs.version-bump.outputs.next_version }}"
          
      - name: Push new changelog
        run: |
          git add --update
          git switch ${{ github.event.repository.default_branch }}
          git config --global user.name "gitBot"
          git config --global user.email ${{ github.repository_id }}+git-bot[bot]@users.noreply.github.com
          git commit -m "Changelog of ${{ github.ref_name }}"
          git log --graph --all --oneline
          git push origin
