name: Check Tags Workflow

on:
  push:
    branches:
      - main

jobs:
  check_tags:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install git, jira for python
        run: |
          pip3 install -q GitPython==3.1.40    

      - name: Get latest tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0) 
          echo "LATEST_TAG=${LATEST_TAG}" >> "$GITHUB_ENV"
          
      - name: Get previous tag
        id: previous-tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 -n 1)) 
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> "$GITHUB_ENV"

      - name: Debug Tags
        run: | 
          echo "the latest tag is ${LATEST_TAG}"
          echo "the PREVIOUS tag is ${PREVIOUS_TAG}"
 
      - name: Generate changelog
        shell: python
        run: |
          import git
          import re
          import http.client
          import json
          import os
          
          repo_path = 'C:\\projects\\change-log'
          conn = http.client.HTTPSConnection("api.github.com")
          
          payload = ""
          
          headers = {
              'content-type': "application/json; charset=utf-8",
              'Authorization': "Bearer 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",
              'User-Agent': 'Your-User-Agent-Name'
          }
          
          repo = git.Repo(search_parent_directories=True)
          
          # Get the latest tag
          latest_tag = repo.tags[-1]
          
          # Define patterns for commit messages
          patterns = [r'(?:^\[)(\b[A-Z][A-Z0-9_]+-[1-9][0-9]*)(?:\])']
          
          # Compile regex patterns
          regex_patterns = [re.compile(pattern) for pattern in patterns]
          
          # Iterate over commits from the latest tag
          commits_since_latest_tag = list(repo.iter_commits(f"4.0.0..5.0.0", no_merges=True))
          ls_store = []
          for commit in commits_since_latest_tag:
              message = commit.message.strip()
              for pattern in regex_patterns:
                  if pattern.match(commit.message.strip()):
                      sha = str(commit.hexsha)
                      conn.request("GET", f"/repos/kashyaprakshith/change-log/commits/{sha}/pulls", payload, headers)
                      response = conn.getresponse()
                      data = response.read().decode("utf-8")
                      info = json.loads(data)
                      data = response.read().decode("utf-8")  
                      html_href = info[0].get('_links', {}).get('html', {}).get('href', '') 
                      author_name = commit.author.name 
                      # extract the PR Number
                      link = f"{html_href}"
                      pattern = r'/pull/(\d+)'
                      match = re.search(pattern, link)
                      if match:
                          number = match.group(1)
          
                      #print(f"Commit Message: {message}")
                      #print(f"PR-Link = {html_href}")
                      #print(f"Author: {author_name}")
                      #print(f"PR-NUMBER: {number}")
                      data = f"- {message} by {author_name} [#{number}]({html_href})"
                      ls_store.append(data)
          ls_store_str = "\n".join(ls_store)
          print(ls_store_str)
          
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as myfile:
              myfile.write(f"RELEASE_NOTES={ls_store_str}\n")
 
      - name: get release notes 
        id: release-not
        run: |
          NOTES=$(git log $PREVIOUS_TAG..$LATEST_TAG --pretty='%s' | grep -E '\[\b[A-Z][A-Z0-9_]+-[1-9][0-9]*\]\[(major|minor|patch)\]:\s\w+' | sed 's/^/- /')
          echo  "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - run: echo  "${{ env.RELEASE_NOTES }}"
          
      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          latest-version: ${{ env.LATEST_TAG }}
          release-notes: |
            ${{ env.RELEASE_NOTES }}

     
